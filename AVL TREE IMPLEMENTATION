#include<iostream>
#include<algorithm>
using namespace std;


class Avl_tree {


	struct node {
		int data;
		node* left=NULL;
		node* right=NULL;
		int height=-1;
	};

public:
	node* root_pointer=NULL;

	int height(node*x)
	{
		if (x == NULL)
		{
			return -1;
		}
		else
		{
			return x->height;
		}
	}
	node* single_rotation_with_left(node* k2)
	{
		node* k1 = k2->left;
		
			k2->left = k1->right;
			k1->right = k2;

			k1->height = max(height(k1->left), height(k2)) + 1;
		
		k2->height = max(height(k2->left), height(k2->right)) + 1;

		return k1;
	}
	node* single_rotation_with_right(node* k2)
	{
		node* k1 = k2->right;
		k2->right = k1->left;
		k1->left = k2;
		k1->height = max(height(k2), height(k1->right)) + 1;
		k2->height = max(height(k2->left), height(k2->right)) + 1;
		return k1;
    }
	node* double_rotation_with_left(node* k3)
	{
		node* k1 = k3->left;
		k3->left = single_rotation_with_right(k3->left);
		k3 = single_rotation_with_left(k3);
		return k3;
	}
	node* double_rotation_with_right(node* k1)
	{
		node* k3 = k1->right;
		k1->right = single_rotation_with_left(k1->right);
		k1 = single_rotation_with_right(k1);
		return k1;
	}
	node* insert(int d,node *&root)
	{
		if (root == NULL)
		{
			node* new_node = new node;
			new_node->data = d;
			new_node->left = new_node->right = NULL;
			new_node->height = 0;
			root = new_node;
			//return;
		}
		else
		{
			
			if (d < root->data)
			{
				root->left = insert(d, root->left);
				if (height(root->right) - height(root->left) == 2)
				{
					if (d < root->left->data)
					{
						root = single_rotation_with_left(root);
					}
					else
					{
						root = double_rotation_with_left(root);
					}
				}
			}
			else if (d > root->data)
			{
				root->right = insert(d, root->right);
				if (height(root->right) - height(root->left) == 2)
				{
					if (d < root->right->data)
					{
						root = single_rotation_with_right(root);
					}
					else
					{
						root = double_rotation_with_right(root);
					}
				}
			}
		}
		int x = max(height(root->left), height(root->right));
		root->height = x + 1;
		return root;
    }

	node* delete_node(int d,node*&root)
	{
		if (root == NULL)
		{
			return nullptr;
		}
		else if (d < root->data)
		{
			delete_node(d, root->left);
		}
		else if (d > root->data)
		{
			delete_node(d, root->right);
		}
		else
		{
			node* temp = root;
			if (root == NULL)
			{
				cout << "cannot delete empty node";
			}
			else if (root->left == NULL && root->right == NULL)
			{
				delete temp;
			}
			else if (root->left == NULL)
			{
				root = root->right;
				delete temp;
			}
			else if (root->right == NULL)
			{
				root = root->left;
				delete temp;
			}
			else
			{
				temp = root->right;
				while (temp->left != NULL)
				{
					temp = temp->left;
				}
				temp->left = root->left;
				temp = root;
				root = root->right;
				delete temp;
			}
			root->height = max(height(root->left), height(root->right)) + 1;
			if (root->height == 2)
			{
				if (d < root->left->data)
				{
					root = single_rotation_with_left(root);
				}
				else if (d > root->right->data)
				{
					root = single_rotation_with_right(root);
				}
				else if (d > root->left->data)
				{
					root->left = single_rotation_with_right(root->left);
					root = single_rotation_with_left(root);
				}
				else
				{
					root->right = single_rotation_with_left(root->right);
					root = single_rotation_with_right(root);
				}
			}
		}
	}


	void int_order(node* root)
	{
		if (root == NULL)
		{
			return;
		}
		int_order(root->left);
		cout << root->data<<" "<<root->height<<endl;
		int_order(root->right);
	}


};

int main()
{
	Avl_tree hamza;
	hamza.insert(8, hamza.root_pointer);
	hamza.insert(4, hamza.root_pointer);
	hamza.insert(5, hamza.root_pointer);
	hamza.insert(2, hamza.root_pointer);
	hamza.insert(6, hamza.root_pointer);
	hamza.insert(10, hamza.root_pointer);
	hamza.insert(14, hamza.root_pointer);
	hamza.insert(9, hamza.root_pointer);
	hamza.insert(11, hamza.root_pointer);
	hamza.insert(13, hamza.root_pointer);
	hamza.insert(15, hamza.root_pointer);
	
	hamza.int_order(hamza.root_pointer);

return 0;
}
