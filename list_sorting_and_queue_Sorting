#include<iostream>
using namespace std;


class list
{
	struct node
	{
		int data;
		node* prev=NULL;
		node* next = NULL;
	};
public:
	node* head = NULL;
	node* tail = NULL;
	void insert(int d)
	{
		node* new_node = new node;
		new_node->data = d;
		if (head == NULL)
		{
			head = new_node;
			tail = new_node;
		}
		else
		{
			tail->next = new_node;
			new_node->prev = tail;
			tail = tail->next;
		}
	}
void odd_even_separation()
	{
		node* odd=head;
		node* even = head->next;
		node* even_first = head->next;
		while (odd->next != NULL && even->next!= NULL)
		{
			odd->next = even->next;
			odd = even->next;
			even->next = odd->next;
			even = odd->next;



		}
		odd->next = even_first;

	}
	void bubble_sort()
	{
		node* current = head;
		while (current->next != NULL)
		{
			node* temp = current;
			while (temp != NULL)
			{
				if (current->data < temp->data)
				{
					int x = current->data;
					current->data = temp->data;
					temp->data = x;
				}
				temp = temp->next;
			}
			current = current->next;
		}
	}
	void insertion_sort()
	{
		node* current = head->next;

		while (current != NULL)
		{
			node* temp = current->prev;
			int key = current->data;
			while (temp != NULL && key > temp->data)
			{
				temp->next->data = temp->data;
				temp = temp->prev;
			}
			if (temp == NULL)
			{
				head->data = key;
			}
			else
			{
				temp->next->data = key;
			}
			current = current->next;
		}

	}
	void selection_sort()
	{
		node* current = head;
		node* temp;
		node* max;
		while (current != NULL)
		{
			temp = current;
			max = current;
			while (temp!= NULL)
			{
				if (max->data < temp->data)
				{
					max = temp;
				}
				temp = temp->next;
			}
			int x = current->data;
			current->data = max->data;
			max->data = x;
			current = current->next;


		}
	}
	void display()
	{
		node* temp = head;
		while (temp != NULL)
		{
			cout << temp->data << " ";
			temp = temp->next;
		}
		cout << endl;
	}
};
class queue
{
	int arr[10];
	int count;
	int front;
	int rear;
public:
	queue()
	{
		for (int i = 0; i < 10; i++)
		{
			arr[i] = 0;
	    }
		count = 0;
		front = -1;
		rear = -1;
	}
	void push(int x)
	{
		if (rear == -1)
		{
			arr[++rear] = x;
			front++;
			count++;
		}
		else if (count == 10)
		{
			cout << "queue is full";
		}
		else if (rear == 9)
		{
			rear = 0;
			arr[rear] = x;
			count++;
		}
		else
		{
			rear = (rear + 1) % 10;
			arr[rear] = x;
			count++;
		}
	}
	void pop()
	{
		if (count == 0)
		{
			cout << "queue is empty";
		}
		else if(front ==9)
		{
			cout << arr[front];
			front = 0;
			count--;
		}
		else
		{
			cout << arr[front] << endl;
			front = (front + 1) % 10;
			count--;
		}
	}
	void bubble_sort()
	{
		for (int i = 0; i < 10; i++)
		{
			for (int j = 0; j < 9; j++)
			{
				if (arr[j] < arr[j + 1])
				{
					int temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
	}

	void insertion_sort()
	{

		for (int i = 1; i < 10; i++)
		{
			int key = arr[i];
			int j = i - 1;
			while (j >= 0 && key > arr[j])
			{
				arr[j + 1] = arr[j];
				j--;
			}
			arr[j + 1] = key;
		}
	}
	void selection_sort()
	{
		for (int i = 0; i < 10; i++)
		{
			int max = i;
			for (int j = i; j < 9; j++)
			{
				if (arr[i] < arr[j + 1])
				{
					max = j + 1;
				}
			}
			int temp = arr[i];
			arr[i] = arr[max];
			arr[max] = temp;
			//display();
			//cout << endl;
		}
	}

	void display()
	{
		for (int i = 0; i < 10; i++)
		{
			cout << arr[i] << " ";
		}
	}

};

int main()
{
	list hamza;
	hamza.insert(1);
	hamza.insert(3);
	hamza.insert(5);
	hamza.insert(2);
	hamza.insert(4);
	hamza.display();
	//hamza.bubble_sort();
	cout << "y\n";
	//hamza.insertion_sort();
	//hamza.selection_sort();
	hamza.display();


	queue saad;
	for (int i = 0; i < 8; i++)
	{
		saad.push(i);
	}
	saad.push(9);
	saad.push(10);
	saad.pop();
	saad.push(11);
	//saad.bubble_sort();
	//saad.insertion_sort();
	saad.selection_sort();
	saad.display();
}
